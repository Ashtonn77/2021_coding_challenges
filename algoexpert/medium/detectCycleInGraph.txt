import java.util.*;

class Program {

  public boolean cycleInGraph(int[][] edges) {
    
			int _l = edges.length;
			boolean[] visited = new boolean[_l];
			boolean[] currentlyInStack = new boolean[_l];
		
			for(int node = 0; node < _l; node++){
				
					if(visited[node])
						continue;
				
					boolean isCycle = helper(edges, node, visited, currentlyInStack);
				
					if(isCycle)
						return true;
				
			}
		
			return false;
  }
	
	boolean helper(int[][] edges, int node, boolean[] visited, boolean[] currentlyInStack){
		
				visited[node] = true;
				currentlyInStack[node] = true;
				
				int[] neighbours = edges[node];
		
				for(int neighbour : neighbours){
						
						if(!visited[neighbour]){
							
								boolean isCycle = helper(edges, neighbour, visited, currentlyInStack);
								if(isCycle)
										return true;
							
							
						}else if(currentlyInStack[neighbour])
								return true;
					
					
				}
				
			
		
				currentlyInStack[node] = false;
				return false;
		
	}
	
}