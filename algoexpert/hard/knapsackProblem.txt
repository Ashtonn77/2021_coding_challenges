import java.util.*;

class Program {
  public static List<List<Integer>> knapsackProblem(int[][] items, int capacity) {
    
		int[][] res = new int[items.length + 1][capacity + 1];
		
		for(int i = 1; i <= items.length; i++){
			
			int currentWeight = items[i - 1][1];
			int currentValue = items[i - 1][0];
			
			for(int j = 0; j < capacity + 1; j++){
				
					if(currentWeight > j){
						
						res[i][j] = res[i - 1][j];
						
					}else{
						
						res[i][j] = Math.max(res[i - 1][j], res[i - 1][j - currentWeight] + currentValue);
						
					}
				
			}
			
			
			
		}
		
		return getKnapsackItems(res, items, res[items.length][capacity]);
  }
	
	public static List<List<Integer>> getKnapsackItems(int[][] res, int[][] items, int weight){
		
		List<List<Integer>> sequence = new ArrayList<>();
		List<Integer> totalWeight = new ArrayList<>();
		
		totalWeight.add(weight);
		sequence.add(totalWeight);
		sequence.add(new ArrayList<Integer>());
		
		int i = res.length - 1;
		int j = res[0].length - 1;
		
		while(i > 0){
			
			if(res[i][j] == res[i - 1][j]){
				i--;								
			}else{
				sequence.get(1).add(0, i - 1);
				j -= items[i - 1][1];
				i--;
			}
			if(j == 0)
				break;
			
		}
		
		return sequence;
	}

	
}




