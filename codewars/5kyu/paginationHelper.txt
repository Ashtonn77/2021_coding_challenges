import java.util.*;

// TODO: complete this object/class

public class PaginationHelper<I> {

  List<I> collection = new ArrayList<>();
  int totalPages;
  int itemsOnLastPage;
  int collectionLength;
  int itemsPerPage;
   
  /**
   * The constructor takes in an array of items and a integer indicating how many
   * items fit within a single page
   */
  public PaginationHelper(List<I> collection, int itemsPerPage) {     
      int _l = collection.size();
      int upperBound = (int)Math.ceil((double)_l / itemsPerPage);
      
      this.itemsPerPage = itemsPerPage;
      this.collection = collection;    
      this.totalPages = upperBound;
      this.itemsOnLastPage = _l % itemsPerPage == 0 ? itemsPerPage : _l % itemsPerPage;
      this.collectionLength = _l;
      
      
  }
  
  /**
   * returns the number of items within the entire collection
   */
  public int itemCount() {
    return this.collectionLength;
  }
  
  /**
   * returns the number of pages
   */
  public int pageCount() {
    return this.totalPages;
  }
  
  /**
   * returns the number of items on the current page. page_index is zero based.
   * this method should return -1 for pageIndex values that are out of range
   */
  public int pageItemCount(int pageIndex) {
    if(pageIndex >= this.totalPages){
      return -1;
    }else if(pageIndex == this.totalPages - 1){
      return this.itemsOnLastPage;
      
    }
    return this.itemsPerPage;
  }
  
  /**
   * determines what page an item is on. Zero based indexes
   * this method should return -1 for itemIndex values that are out of range
   */
  public int pageIndex(int itemIndex) {
  
      if(itemIndex > this.collectionLength || itemIndex < 0 
         || this.collection == null || this.collectionLength == 0){
        return -1;
      }
      
      int out = 0;
      int rolling = this.itemsPerPage;
      while(rolling < itemIndex){
        rolling += this.itemsPerPage;
        out++;
      }
    
      return out;
    
  }
}