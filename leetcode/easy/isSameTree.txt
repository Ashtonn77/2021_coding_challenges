/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
**short recursive version****

public bool IsSameTree(TreeNode p, TreeNode q) {
        
        if(q == null && p == null) return true;
        else if(q == null) return false;
        else if(p == null) return false;

	if(p.val != q.val) return false;
	
	return IsSameTree(p.left, q.left) && IsSameTree(p.right, q.right);		

}

****Long version***************************

public class Solution {
    public bool IsSameTree(TreeNode p, TreeNode q) {
        
        if(q == null && p == null) return true;
        else if(q == null) return false;
        else if(p == null) return false;
        
        Queue<TreeNode> one = new Queue<TreeNode>();
        Queue<TreeNode> two = new Queue<TreeNode>();
        
        one.Enqueue(p);
        two.Enqueue(q);
        
        while(one.Count > 0){
            
            TreeNode _1 = one.Dequeue();
            TreeNode _2 = two.Dequeue();
            
            if(_1.val != _2.val) return false;
            
            if(_1.left != null){
                 one.Enqueue(_1.left);
            }else{
                if(_2.left != null) return false;
            }
            
            if(_2.left != null){
                two.Enqueue(_2.left);                
            }else{
                if(_1.left != null) return false;
            }
            
            
            if(_1.right != null){
                 one.Enqueue(_1.right);
            }else{
                if(_2.right != null) return false;
            }
            
            if(_2.right != null){
                two.Enqueue(_2.right);
            }else{
                if(_1.right != null) return false;
            }            
            
        }
        
        
        return true;
        
    }
}